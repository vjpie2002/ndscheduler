#!/bin/sh

date;
echo "uptime:"
uptime
echo "Currently connected:"
w
echo "--------------------"
echo "Last logins:"
last -a |head -3
echo "--------------------"
echo "Disk and memory usage:"
df -h | xargs | awk '{print "Free/total disk: " $11 " / " $9}'
free -m | xargs | awk '{print "Free/total memory: " $17 " / " $8 " MB"}'
echo "--------------------"
start_log=`head -1 /var/log/messages |cut -c 1-12`
oom=`grep -ci kill /var/log/messages`
echo -n "OOM errors since $start_log :" $oom
echo ""
echo "--------------------"
echo "Utilization and most expensive processes:"
top -b |head -3
echo
top -b |head -10 |tail -4
echo "--------------------"
echo "Open TCP ports:"
nmap -p- -T4 127.0.0.1
echo "--------------------"
echo "Current connections:"
ss -s
echo "--------------------"
echo "processes:"
ps auxf --width=200
echo "--------------------"
echo "vmstat:"
vmstat 1 5
test -d $hier/logs/cron || mkdir -p $hier/logs/cron
chown app:appeng $hier/logs/cron
log_file=$hier/logs/cron/cronlog.$tool.$today

# Abort if cron is triggered from other host other than admin-app
if [ "${role}-${subrole}" != "admin-app" ]; then
  echo "@@@ Cronjobs must be triggered only from admin-app ...exiting @@@"
  exit 2
fi

# Check for left-over or hung cronjobs
real_name=$hier/bin/$tool
message="Environment: ${app_env}  Cluster: ${cluster}  Region: ${region}"
procs=`ps -ef | grep $real_name | egrep -v "$0|grep"`
if test -n "$procs"; then
  (echo "@@@ `hostname`: $0 leftover cronjob \"$tool\" detected. $message. Please fix and re-trigger cron @@@"; \
    echo "$procs"; \
    proc $real_name) | \
  exit 2
fi

# As we move towards a cluster agnostic directory structure with Spinnaker,
#   print cluster name in the logs for better clarity
echo "${cluster} run_spinnaker.cron is running from `pwd` at `date`" | tee $log_file
echo "Job-name: $tool" | tee -a $log_file
echo "Running $cmd $@" | tee -a $log_file
$cmd "$@" | tee -a $log_file

# Return proper exit code if cronjob fails
# $PIPESTATUS is an array that holds the exit status of each command in your last foreground pipeline of commands
ret_code=`echo ${PIPESTATUS[0]}`
if [ $ret_code != 0 ]; then
  echo "@@@ ${cluster}: $tool job failed to run @@@"
  exit 2
fi

# For successful run of cron
echo "${cluster} run_spinnaker.cron finished at `date`" | tee -a $log_file
