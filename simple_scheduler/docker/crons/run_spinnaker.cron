#!/bin/sh
# Wrapper script to run crons on AWS
# Usage: /app/qbo-app/bin/run_spinnaker.cron <script> [script-args]
#   E.g. /app/qbo-app/bin/run_spinnaker.cron daily-companyupdates_spinnaker.cron Weekends

cd `dirname $0`/.. || exit 2
hier=`pwd`
PATH=/usr/local/bin:$hier/bin:/bin:$PATH
export PATH

if [ $# -eq 0 ]; then
  echo "@@@ No arguments passed ...exiting @@@"
  exit 2
fi

cmd=$1
shift
tool=`basename $cmd`
today=`date "+%Y%m%d-%H%M"`

# Safety net: Do not trigger crons for inactive or passivated stacks in AWS
PASSIVATE_LOG=$hier/logs/cron_activate_passivate.log
IS_INACTIVE="true"

if [ -f $hier/conf/dynamic_properties/qbo.dynamic.properties ]; then
  prop_value=`cat $hier/conf/dynamic_properties/qbo.dynamic.properties | grep qbo.this.cluster.is.inactive | tail -1 | cut -d'=' -f2`
  if [[ "$prop_value" = "false" || -z $prop_value  ]]; then
    IS_INACTIVE="false"
  fi
else
  echo "@@@ $hier/conf/dynamic_properties/qbo.dynamic.properties not found ...exiting @@@"
  exit 2
fi

if [ -f /etc/intu_metadata/app.ini ]; then
  IS_AWS="true"
  # Wrapper to fetch cluster params
  . $hier/bin/fetchClusterParams.sh
else
  echo "@@@ Metadata file: \'/etc/intu_metadata/app.ini\' not found ...exiting @@@"
  exit 2
fi

if [ "$IS_AWS" == "true" -a "$IS_INACTIVE" == "true" ]; then
  echo "`date`: ${cluster} AWS stack is \"Inactive\". Crons are passivated [job-name: $tool]" >> $PASSIVATE_LOG
  exit 0
fi

# Make sure cron directory exists else create it & ensure permissions are set
test -d $hier/logs/cron || mkdir -p $hier/logs/cron
chown app:appeng $hier/logs/cron
log_file=$hier/logs/cron/cronlog.$tool.$today

# Abort if cron is triggered from other host other than admin-app
if [ "${role}-${subrole}" != "admin-app" ]; then
  echo "@@@ Cronjobs must be triggered only from admin-app ...exiting @@@"
  exit 2
fi

# Check for left-over or hung cronjobs
real_name=$hier/bin/$tool
message="Environment: ${app_env}  Cluster: ${cluster}  Region: ${region}"
procs=`ps -ef | grep $real_name | egrep -v "$0|grep"`
if test -n "$procs"; then
  (echo "@@@ `hostname`: $0 leftover cronjob \"$tool\" detected. $message. Please fix and re-trigger cron @@@"; \
    echo "$procs"; \
    proc $real_name) | \
  exit 2
fi

# As we move towards a cluster agnostic directory structure with Spinnaker,
#   print cluster name in the logs for better clarity
echo "${cluster} run_spinnaker.cron is running from `pwd` at `date`" | tee $log_file
echo "Job-name: $tool" | tee -a $log_file
echo "Running $cmd $@" | tee -a $log_file
$cmd "$@" | tee -a $log_file

# Return proper exit code if cronjob fails
# $PIPESTATUS is an array that holds the exit status of each command in your last foreground pipeline of commands
ret_code=`echo ${PIPESTATUS[0]}`
if [ $ret_code != 0 ]; then
  echo "@@@ ${cluster}: $tool job failed to run @@@"
  exit 2
fi

# For successful run of cron
echo "${cluster} run_spinnaker.cron finished at `date`" | tee -a $log_file
